@page "/file/{ExcelFileId:int}/print"
@layout BlankLayout
@using B1TestTask.Components
@using B1TestTask.Data
@using B1TestTask.Helpers
@using System.Security.Principal
@using System.Web
@inject ExcelFilesService excelFilesService
@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

@if (IsLoading)
{
    <CustomLoadingSpinner/>
}

@if (Error is not null)
{
    IsLoading = false;
    <CustomError ErrorMessage="@this.Error"/>
}

@if (ExcelFile is not null)
{
    <body onload="window.print()">
        <table class="excel_file_table table-border padding-between-rows">
            <thead>

            </thead>
            <tbody>

            <tr>
                <td>@ExcelFile.ExcelFileReportDetails.BankName</td>
                <td/>
                <td/>
                <td/>
                <td/>
                <td/>
                <td/>
            </tr>
            <tr>
                <td colspan="7" align="center">@ExcelFile.ExcelFileReportDetails.Title</td>
            </tr>
            <tr>
                <td colspan="7" align="center">за период с @ExcelFile.ExcelFileReportDetails.FromDate.Value.ToShortDateString() по @ExcelFile.ExcelFileReportDetails.ToDate.Value.ToShortDateString()</td>
            </tr>
            <tr>
                <td colspan="7" align="center">@ExcelFile.ExcelFileReportDetails.TargetName</td>
            </tr>
            <tr>
                <td class="borderless"/>
            </tr>
            <tr>
                <td>@ExcelFile.ExcelFileReportDetails.GeneratedDate.Value.ToShortDateString()</td>
                <td/>
                <td/>
                <td/>
                <td/>
                <td/>
                <td align="right">@ExcelFile.ExcelFileReportDetails.Currency</td>
            </tr>


            <tr>
                <td rowspan="2" align="center" style="font-weight: bold;">Б/сч</td>
                <td colspan="2" align="center" style="font-weight: bold;">ВХОДЯЩЕЕ САЛЬДО</td>
                <td colspan="2" align="center" style="font-weight: bold;">ОБОРОТЫ</td>
                <td colspan="2" align="center" style="font-weight: bold;">ИСХОДЯЩЕЕ САЛЬДО</td>
            </tr>
            <tr>
                <td align="center" style="font-weight: bold;">Актив</td>
                <td align="center" style="font-weight: bold;">Пассив</td>
                <td align="center" style="font-weight: bold;">Дебет</td>
                <td align="center" style="font-weight: bold;">Кредит</td>
                <td align="center" style="font-weight: bold;">Актив</td>
                <td align="center" style="font-weight: bold;">Пассив</td>
            </tr>
            @foreach (var classDetails in this.ExcelFile.ExcelFileReportDetails.ClassDetailsArray)
            {
                <tr>
                    <td align="center" style="font-weight: bold;" colspan="7">КЛАСС @classDetails.Number @classDetails.Title</td>
                </tr>
                @foreach (var bankAccountGroup in BankAccountDetailsSummator.GroupSumClassBankAccountDetails(classDetails))
                {
                    @foreach (var bankAccount in bankAccountGroup)
                    {
                        @if (bankAccount.Number.ToString().Length == 2)
                        {
                            <tr style="font-weight: bold;">
                                <td>@bankAccount.Number.ToString()</td>
                                <td>@bankAccount.InputSaldoDetails.Active.NormalizeAndReturnString()</td>
                                <td>@bankAccount.InputSaldoDetails.Passive.NormalizeAndReturnString()</td>
                                <td>@bankAccount.TurnoverDetails.Debit.NormalizeAndReturnString()</td>
                                <td>@bankAccount.TurnoverDetails.Credit.NormalizeAndReturnString()</td>
                                <td>@bankAccount.OutputSaldoDetails.Active.NormalizeAndReturnString()</td>
                                <td>@bankAccount.OutputSaldoDetails.Passive.NormalizeAndReturnString()</td>
                            </tr>
                        }
                        else if (this.GroupXXXXBankAccounts is false)
                        {
                            <tr>
                                <td>@bankAccount.Number.ToString()</td>
                                <td>@bankAccount.InputSaldoDetails.Active.NormalizeAndReturnString()</td>
                                <td>@bankAccount.InputSaldoDetails.Passive.NormalizeAndReturnString()</td>
                                <td>@bankAccount.TurnoverDetails.Debit.NormalizeAndReturnString()</td>
                                <td>@bankAccount.TurnoverDetails.Credit.NormalizeAndReturnString()</td>
                                <td>@bankAccount.OutputSaldoDetails.Active.NormalizeAndReturnString()</td>
                                <td>@bankAccount.OutputSaldoDetails.Passive.NormalizeAndReturnString()</td>
                            </tr>
                        }
                    }
                }
                <tr style="font-weight: bold;">
                    <td>ПО КЛАССУ</td>
                    <td>@BankAccountDetailsSummator.SumClassBankAccountDetails(classDetails).InputSaldoDetails.Active.NormalizeAndReturnString()</td>
                    <td>@BankAccountDetailsSummator.SumClassBankAccountDetails(classDetails).InputSaldoDetails.Passive.NormalizeAndReturnString()</td>
                    <td>@BankAccountDetailsSummator.SumClassBankAccountDetails(classDetails).TurnoverDetails.Debit.NormalizeAndReturnString()</td>
                    <td>@BankAccountDetailsSummator.SumClassBankAccountDetails(classDetails).TurnoverDetails.Credit.NormalizeAndReturnString()</td>
                    <td>@BankAccountDetailsSummator.SumClassBankAccountDetails(classDetails).OutputSaldoDetails.Active.NormalizeAndReturnString()</td>
                    <td>@BankAccountDetailsSummator.SumClassBankAccountDetails(classDetails).OutputSaldoDetails.Passive.NormalizeAndReturnString()</td>
                </tr>
            }
            <tr style="font-weight: bold;">
                <td>БАЛАНС</td>
                <td>@BankAccountDetailsSummator.SumAllClassesBankAccountDetails(this.ExcelFile.ExcelFileReportDetails.ClassDetailsArray).InputSaldoDetails.Active.NormalizeAndReturnString()</td>
                <td>@BankAccountDetailsSummator.SumAllClassesBankAccountDetails(this.ExcelFile.ExcelFileReportDetails.ClassDetailsArray).InputSaldoDetails.Passive.NormalizeAndReturnString()</td>
                <td>@BankAccountDetailsSummator.SumAllClassesBankAccountDetails(this.ExcelFile.ExcelFileReportDetails.ClassDetailsArray).TurnoverDetails.Debit.NormalizeAndReturnString()</td>
                <td>@BankAccountDetailsSummator.SumAllClassesBankAccountDetails(this.ExcelFile.ExcelFileReportDetails.ClassDetailsArray).TurnoverDetails.Credit.NormalizeAndReturnString()</td>
                <td>@BankAccountDetailsSummator.SumAllClassesBankAccountDetails(this.ExcelFile.ExcelFileReportDetails.ClassDetailsArray).OutputSaldoDetails.Active.NormalizeAndReturnString()</td>
                <td>@BankAccountDetailsSummator.SumAllClassesBankAccountDetails(this.ExcelFile.ExcelFileReportDetails.ClassDetailsArray).OutputSaldoDetails.Passive.NormalizeAndReturnString()</td>
            </tr>


            </tbody>
        </table>
    </body>
}
else
{
<text>Здесь пусто</text>
}

@code {
    public bool IsLoading { get; set; } = true;
    public string? Error { get; set; }
    
    [Parameter]
    public int ExcelFileId { get; set; }
    public ExcelFile? ExcelFile { get; set; }

    // for printing
    [Parameter]
    public string ParamsStr { get; set; }
    private bool? GroupXXXXBankAccounts { get; set; }

    void GetExcelFile()
    {
        this.ExcelFile = excelFilesService.GetExcelFileById(ExcelFileId);
        this.IsLoading = false;
    }
    
    protected override async Task OnInitializedAsync()
    {
        await Task.Run(GetExcelFile);
        await Task.Run(GetQueryStringValues);
    }
    
    private void GetQueryStringValues()
    {
        bool groupXXXXBankAccountsValue;
        NavManager.TryGetQueryString<bool>("groupXXXXBankAccounts", out groupXXXXBankAccountsValue);
        this.GroupXXXXBankAccounts = groupXXXXBankAccountsValue;
    }
}